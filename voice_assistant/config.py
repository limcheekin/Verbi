# voice_assistant/config.py

import os
from dotenv import load_dotenv

# Load environment variables from the .env file
load_dotenv()

class Config:
    """
    Configuration class to hold the model selection and API keys.
    
    Attributes:
        TRANSCRIPTION_MODEL (str): The model to use for transcription ('openai', 'groq', 'deepgram', 'fastwhisperapi', 'local').
        RESPONSE_MODEL (str): The model to use for response generation ('openai', 'groq', 'ollama', 'localai', 'local').
        TTS_MODEL (str): The model to use for text-to-speech ('openai', 'deepgram', 'elevenlabs', 'melotts', 'cartesia', 'localai', 'local').
        OPENAI_API_KEY (str): API key for OpenAI services.
        GROQ_API_KEY (str): API key for Groq services.
        DEEPGRAM_API_KEY (str): API key for Deepgram services.
        ELEVENLABS_API_KEY (str): API key for ElevenLabs services.
        LOCAL_MODEL_PATH (str): Path to the local model.
    """
    # Model selection
    TRANSCRIPTION_MODEL = os.getenv("TRANSCRIPTION_MODEL", "deepgram")  # possible values: openai, groq, deepgram, fastwhisperapi
    RESPONSE_MODEL = os.getenv("RESPONSE_MODEL", "openai")  # possible values: openai, groq, ollama, localai
    TTS_MODEL = os.getenv("TTS_MODEL", "openai")  # possible values: openai, deepgram, elevenlabs, melotts, cartesia

    # currently using the MeloTTS for local models. here is how to get started:
    # https://github.com/myshell-ai/MeloTTS/blob/main/docs/install.md#linux-and-macos-install

    # LLM Selection
    OLLAMA_LLM=os.getenv("OLLAMA_LLM", "llama3:8b")
    GROQ_LLM=os.getenv("GROQ_LLM", "llama3-8b-8192")
    OPENAI_LLM=os.getenv("OPENAI_LLM", "gpt-4o")
    LOCALAI_LLM=os.getenv("LOCALAI_LLM", "llama-3.2-1b-instruct:q4_k_m")

    # API keys and paths
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    GROQ_API_KEY = os.getenv("GROQ_API_KEY")
    DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
    ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
    LOCAL_MODEL_PATH = os.getenv("LOCAL_MODEL_PATH")
    CARTESIA_API_KEY = os.getenv("CARTESIA_API_KEY")
    LOCALAI_BASE_URL = os.getenv("LOCALAI_BASE_URL")
    FAST_WHISPER_API_BASE_URL = os.getenv("FAST_WHISPER_API_BASE_URL")
    FAST_WHISPER_API_KEY = os.getenv("FAST_WHISPER_API_KEY", "dummy_api_key")    
    FAST_WHISPER_API_MODEL = os.getenv("FAST_WHISPER_API_MODEL", "base")

    # for serving the MeloTTS model
    TTS_PORT_LOCAL = int(os.getenv("TTS_PORT_LOCAL", "5150"))

    TTS_API_MODEL = os.getenv("TTS_API_MODEL", "tts-1")
    TTS_API_VOICE = os.getenv("TTS_API_VOICE", "nova")
    LOCALAI_TTS_BACKEND = os.getenv("LOCALAI_TTS_BACKEND")
    LOCALAI_TTS_LANGUAGE = os.getenv("LOCALAI_TTS_LANGUAGE", "en")

    # temp file generated by the initial STT model
    INPUT_AUDIO = "test.mp3"

    @staticmethod
    def validate_config():
        """
        Validate the configuration to ensure all necessary environment variables are set.
        
        Raises:
            ValueError: If a required environment variable is not set.
        """
        Config._validate_model('TRANSCRIPTION_MODEL', [
            'openai', 'groq', 'deepgram', 'fastwhisperapi', 'local'])
        Config._validate_model('RESPONSE_MODEL', [
            'openai', 'groq', 'ollama', 'localai', 'local'])
        Config._validate_model('TTS_MODEL', [
            'openai', 'deepgram', 'elevenlabs', 'melotts', 'cartesia', 'localai', 'local'])

        Config._validate_api_key('TRANSCRIPTION_MODEL', 'openai', 'OPENAI_API_KEY')
        Config._validate_api_key('TRANSCRIPTION_MODEL', 'groq', 'GROQ_API_KEY')
        Config._validate_api_key('TRANSCRIPTION_MODEL', 'deepgram', 'DEEPGRAM_API_KEY')

        Config._validate_api_key('RESPONSE_MODEL', 'openai', 'OPENAI_API_KEY')
        Config._validate_api_key('RESPONSE_MODEL', 'groq', 'GROQ_API_KEY')

        Config._validate_api_key('TTS_MODEL', 'openai', 'OPENAI_API_KEY')
        Config._validate_api_key('TTS_MODEL', 'deepgram', 'DEEPGRAM_API_KEY')
        Config._validate_api_key('TTS_MODEL', 'elevenlabs', 'ELEVENLABS_API_KEY')
        Config._validate_api_key('TTS_MODEL', 'cartesia', 'CARTESIA_API_KEY')

    @staticmethod
    def _validate_model(attribute, valid_options):
        model = getattr(Config, attribute)
        if model not in valid_options:
            raise ValueError(
                f"Invalid {attribute}. Must be one of {valid_options}"
            )
        
    @staticmethod
    def _validate_api_key(model_attr, model_value, api_key_attr):
        if getattr(Config, model_attr) == model_value and not getattr(Config, api_key_attr):
            raise ValueError(f"{api_key_attr} is required for {model_value} models")